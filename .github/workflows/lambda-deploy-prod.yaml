name: ecr push image

on:
  push:
    tags:
      - '*'

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
  REPOSITORY_PREFIX: viz-butterthon-dev-ecr-
  LAMBDA_PREFIX: viz-butterthon-dev-func-

jobs:
  push:
    runs-on: ubuntu-latest
    # permissionsがないとOIDCが使えない
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: extract
        name: Extract lambda name and version
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Full tag: $TAG_NAME"

          if [[ "$TAG_NAME" =~ ^([a-zA-Z0-9_\-]+)-v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            LAMBDA_NAME="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
            echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ タグ名が <lambda名>-v<semver> 形式ではありません。スキップします。"
            exit 1
          fi

      # AWS認証
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: "ap-northeast-1"
          role-to-assume: ${{ secrets.GH_OIDC_ROLE_ARN }}

      # ECR認証
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # wms_refresh_tokenのDockerイメージをbuild&push
      - name: build and push docker image to ecr
        working-directory: src/lambda/${{ steps.extract.outputs.lambda_name }}
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY_PREFIX }}${{ steps.extract.outputs.lambda_name }}
          IMAGE_TAG: v${{ steps.extract.outputs.version }}
        run: |
          echo "Building for lambda: $REPOSITORY"
          docker build . --tag $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Update lambda function
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY_PREFIX }}${{ steps.extract.outputs.lambda_name }}
          IMAGE_TAG: v${{ steps.extract.outputs.version }}
          LAMBDA_NAME: ${{ env.LAMBDA_PREFIX }}${{ steps.extract.outputs.lambda_name }}
        run: |
          echo "Updating Lambda function: $LAMBDA_NAME"
          aws lambda update-function-code \
            --function-name "$LAMBDA_NAME" \
            --image-uri "$REGISTRY/$REPOSITORY:v$IMAGE_TAG"
